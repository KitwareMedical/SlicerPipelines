/*==============================================================================

  Program: 3D Slicer

  Copyright (c) Kitware Inc.

  See COPYRIGHT.txt
  or http://www.slicer.org/copyright/copyright.txt for details.

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This file was originally developed by Jean-Christophe Fillion-Robin, Kitware Inc.
  and was partially funded by NIH grant 3P41RR013218-12S1

==============================================================================*/

#include "@BRIDGE_TEMPLATE_NAME@.h"

@BRIDGE_TEMPLATE_NAME@::@BRIDGE_TEMPLATE_NAME@(QWidget *parent)
    : qSlicerLegacyPipelineCLIModulesBridgeParameter(parent)
    , CLIModuleWidget(new qSlicerCLIModuleWidget)
    , Helper(CLIModuleWidget.get())
    , Widget()
    , Value()
  {}
  void @BRIDGE_TEMPLATE_NAME@::Initialize(const ModuleParameter& moduleParameter) {
  if (moduleParameter.GetTag() != this->GetTag()) {
    std::cerr << "Unable to initialize " << this->GetTag() << " with type " << moduleParameter.GetArgType() << std::endl;
    throw std::invalid_argument(std::string("Unable to initialize ") + this->GetTag() + " with type " + moduleParameter.GetArgType());
  }
  if (moduleParameter.GetMultiple() == "true") {
    std::cerr << "Cannot initialize single @BRIDGE_TEMPLATE_TYPE@ with multiple @BRIDGE_TEMPLATE_TYPE@" << std::endl;
    throw std::invalid_argument("Cannot initialize single @BRIDGE_TEMPLATE_TYPE@ with multiple @BRIDGE_TEMPLATE_TYPE@");
  }
  this->Widget.reset(this->Helper.createTagWidget(moduleParameter));
  const auto name = QString::fromStdString(moduleParameter.GetName());
  QObject::connect(&(this->Helper), &qSlicerCLIModuleUIHelper::valueChanged,
    [this, name](const QString& signalName, const QVariant& value) {
      if (name == signalName) {
        try {
          this->Value = Converter<@BRIDGE_TEMPLATE_TYPE@>::convert(value);
        } catch (...) {
          // the conversion (rightly) throws if a string input for a vector of numbers is bad
          // this is really no different than what already exists for CLI module, so we won't make
          // a big deal of it
        }
      }
    });
  try {
    this->Value = Converter<@BRIDGE_TEMPLATE_TYPE@>::convert(moduleParameter.GetValue());
  } catch (const std::invalid_argument&) {}
}
@BRIDGE_TEMPLATE_TYPE@ @BRIDGE_TEMPLATE_NAME@::GetValue() const {
  return this->Value;
}
QWidget* @BRIDGE_TEMPLATE_NAME@::GetUI() {
  return this->Widget.get();
}
