# This file was autogenerated by the PipelineCreator

import itertools
import os
import pickle
import vtk, qt, ctk, slicer
from slicer.ScriptedLoadableModule import *
from slicer.util import VTKObservationMixin
from PipelineCreator import slicerPipeline

class {{MODULE_NAME}}(ScriptedLoadableModule):
  def __init__(self, parent):
    ScriptedLoadableModule.__init__(self, parent)
    self.parent.title = "{{MODULE_NAME}}"
    self.parent.categories = {{MODULE_CATEGORIES}}
    self.parent.dependencies = {{MODULE_DEPENDENCIES}}
    self.parent.contributors = {{MODULE_CONTRIBUTORS}}
    self.parent.helpText = """
This module was generated by the PipelineCreator
"""
    self.parent.acknowledgementText = """
The basis of this file was originally developed by Jean-Christophe Fillion-Robin, Kitware Inc., Andras Lasso, PerkLab,
and Steve Pieper, Isomics, Inc. and was partially funded by NIH grant 3P41RR013218-12S1.
"""

class {{MODULE_NAME}}Widget(ScriptedLoadableModuleWidget, VTKObservationMixin):
  """Uses ScriptedLoadableModuleWidget base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  """

  def __init__(self, parent=None):
    """
    Called when the user opens the module the first time and the widget is initialized.
    """
    ScriptedLoadableModuleWidget.__init__(self, parent)
    VTKObservationMixin.__init__(self)  # needed for parameter node observation
    self.logic = None
    self._parameterNode = None
    self._updatingGUIFromParameterNode = False

  def setup(self):
    """
    Called when the user opens the module the first time and the widget is initialized.
    """
    ScriptedLoadableModuleWidget.setup(self)

    self.logic = {{MODULE_NAME}}Logic()

    self.uiWidget = slicer.util.loadUI(self.resourcePath('UI/{{MODULE_NAME}}.ui'))
    self.layout.addWidget(self.uiWidget)
    self.ui = slicer.util.childWidgetVariables(self.uiWidget)

    self.ui.RunButton.clicked.connect(self.onRun)

    if self.logic.GetInputType() is not None:
      self.ui.InputNodeComboBox.setMRMLScene(slicer.mrmlScene)
      self.ui.InputNodeComboBox.nodeTypes = (self.logic.GetInputType(), ) # Need the comma so it doesn't split each character
    else:
      self.ui.InputNodeLabel.hide()
      self.ui.InputNodeComboBox.hide()

    if self.logic.GetOutputType() is not None:
      self.ui.OutputNodeComboBox.setMRMLScene(slicer.mrmlScene)
      self.ui.OutputNodeComboBox.nodeTypes = (self.logic.GetOutputType(), ) # Need the comma so it doesn't split each character
    else:
      self.ui.OutputNodeLabel.hide()
      self.ui.OutputNodeComboBox.hide()

    self.setupPipelineUI()

    # Make sure parameter node is initialized (needed for module reload)
    self.initializeParameterNode()

  {{MODULE_SETUP_PIPELINE_UI_METHOD}}

  def cleanup(self):
    """
    Called when the application closes and the module widget is destroyed.
    """
    self.removeObservers()

  def enter(self):
    """
    Called each time the user opens this module.
    """
    # Make sure parameter node exists and observed
    self.initializeParameterNode()

  def exit(self):
    """
    Called each time the user opens a different module.
    """
    # Do not react to parameter node changes (GUI wlil be updated when the user enters into the module)
    self.removeObserver(self._parameterNode, vtk.vtkCommand.ModifiedEvent, self.updateGUIFromParameterNode)

  def onSceneStartClose(self, caller, event):
    """
    Called just before the scene is closed.
    """
    # Parameter node will be reset, do not use it anymore
    self.setParameterNode(None)

  def onSceneEndClose(self, caller, event):
    """
    Called just after the scene is closed.
    """
    # If this module is shown while the scene is closed then recreate a new parameter node immediately
    if self.parent.isEntered:
      self.initializeParameterNode()

  def initializeParameterNode(self):
    """
    Ensure parameter node exists and observed.
    """
    # Parameter node stores all user choices in parameter values, node selections, etc.
    # so that when the scene is saved and reloaded, these settings are restored.

    self.setParameterNode(self.logic.getParameterNode())

  def setParameterNode(self, inputParameterNode):
    """
    Set and observe parameter node.
    Observation is needed because when the parameter node is changed then the GUI must be updated immediately.
    """

    # if inputParameterNode:
    #   self.logic.setDefaultParameters(inputParameterNode)

    # Unobserve previously selected parameter node and add an observer to the newly selected.
    # Changes of parameter node are observed so that whenever parameters are changed by a script or any other module
    # those are reflected immediately in the GUI.
    if self._parameterNode is not None:
      self.removeObserver(self._parameterNode, vtk.vtkCommand.ModifiedEvent, self.updateGUIFromParameterNode)
    self._parameterNode = inputParameterNode
    if self._parameterNode is not None:
      self.addObserver(self._parameterNode, vtk.vtkCommand.ModifiedEvent, self.updateGUIFromParameterNode)

    # Initial GUI update
    self.updateGUIFromParameterNode()

  def updateGUIFromParameterNode(self, caller=None, event=None):
    """
    This method is called whenever parameter node is changed.
    The module GUI is updated to show the current state of the parameter node.
    """

    if self._parameterNode is None or self._updatingGUIFromParameterNode:
      return

    # Make sure GUI changes do not call updateParameterNodeFromGUI (it could cause infinite loop)
    self._updatingGUIFromParameterNode = True

    {{MODULE_UPDATE_GUI_FROM_PARAMETER_NODE}}

    # All the GUI updates are done
    self._updatingGUIFromParameterNode = False

  def updateParameterNodeFromGUI(self, caller=None, event=None):
    """
    This method is called when the user makes any change in the GUI.
    The changes are saved into the parameter node (so that they are restored when the scene is saved and loaded).
    """

    if self._parameterNode is None or self._updatingGUIFromParameterNode:
      return

    wasModified = self._parameterNode.StartModify()  # Modify all properties in a single batch

    {{MODULE_UPDATE_PARAMETER_NODE_FROM_GUI}}

    self._parameterNode.EndModify(wasModified)

  def onRun(self):
    if self.logic.GetInputType() is not None:
      inputNode = self.ui.InputNodeComboBox.currentNode()
      if inputNode is None:
        return
    else:
      inputNode = None
    try:
      if inputNode is not None:
        actualOutputNode = self.logic.Run(inputNode)
      else:
        actualOutputNode = self.logic.Run()
      if actualOutputNode is not None:
        desiredOutputNode = self.ui.OutputNodeComboBox.currentNode()
        if desiredOutputNode is not None:
          #doing vtkMRMLNode::Copy breaks the references to the display and storage nodes. Grab them now so we can delete them.
          displayNodes = [desiredOutputNode.GetNthDisplayNode(n) for n in range(desiredOutputNode.GetNumberOfDisplayNodes())]
          storageNodes = [desiredOutputNode.GetNthStorageNode(n) for n in range(desiredOutputNode.GetNumberOfStorageNodes())]

          # copy into node, but keep name
          name = desiredOutputNode.GetName()
          desiredOutputNode.Copy(actualOutputNode)
          desiredOutputNode.SetName(name)

          for n in itertools.chain(displayNodes, storageNodes):
            slicer.mrmlScene.RemoveNode(n)
        slicer.mrmlScene.RemoveNode(actualOutputNode)
        if desiredOutputNode is not None and not desiredOutputNode.GetDisplayNode():
          desiredOutputNode.CreateDefaultDisplayNodes()
    except Exception as e:
      msgbox = qt.QMessageBox()
      msgbox.setWindowTitle("Error running pipeline")
      msgbox.setText(str(e))
      msgbox.exec()

@slicerPipeline
class {{MODULE_NAME}}Logic(ScriptedLoadableModuleLogic):
  def __init__(self):
    """
    Called when the logic class is instantiated. Can be used for initializing member variables.
    """
    ScriptedLoadableModuleLogic.__init__(self)
    self.deleteIntermediates = True

  @staticmethod
  def GetName():
    return '{{MODULE_NAME}}'

  @staticmethod
  def GetInputType():
    return {{MODULE_INPUT_TYPE}}

  @staticmethod
  def GetOutputType():
    return {{MODULE_OUTPUT_TYPE}}

  @staticmethod
  def GetDependencies():
    return {{MODULE_DEPENDENCIES}}

  #TODO get parameters
  @staticmethod
  def GetParameters():
    return []

  {{MODULE_RUN_METHOD}}

  {{MODULE_LOGIC_SET_METHODS}}
